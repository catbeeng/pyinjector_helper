import { assert } from 'console';
import { PythonFile } from '../../models/python/PythonFile';
import { generateImport } from '../module/importsExtractor';
import { PyImport } from '../../models/python/PyImport';
import { getConfig } from '../configLoader';
import { generateImports as generateImportsSource } from '../importsGenerator';
import { formatMultiLineArgs, INDENT_UNIT_AMOUNT } from '../multiLineArgsFormatter';
import { getWorkspaceFolder } from '../workspaceService';
import path from 'path';
import { getModuleFiles } from './injectorModuleFilesRepository';

export async function generateInjectorInitializer() {
    const config = getConfig();
    const workspaceFolder = getWorkspaceFolder();
    const imports = await generateModuleImportsFromDir(path.join(workspaceFolder.uri.fsPath, config.moduleDir));
    const importSource = generateImportsSource(imports);
    const moduleArgs = generateModuleArgs(imports);
    // Injector 初期化テンプレートに適用
    return `# generated by pyinjector-helper
from injector import Injector
${importSource}

injector = Injector(
    [${moduleArgs}]
)
`;
}

function generateModuleArgs(imports: PyImport[]): string {
    const args = imports.map((imp) => imp.name + '()');
    const moduleArgs = formatMultiLineArgs(args, INDENT_UNIT_AMOUNT * 2);
    return moduleArgs;
}

async function generateModuleImportsFromDir(dirPath: string): Promise<PyImport[]> {
    const pyFiles = (await getModuleFiles(dirPath) as PythonFile[]);
    // imports に変換
    return convertFilesToImports(pyFiles);
}

async function convertFilesToImports(pyFiles: PythonFile[]): Promise<PyImport[]> {
    const imports: PyImport[] = [];
    for (const pyFile of pyFiles) {
        assert(pyFile);
        // ファイルを import に変換
        const pyImport = await generateImport(pyFile, pyFile.class);
        imports.push(pyImport);
    }
    return imports;
}

