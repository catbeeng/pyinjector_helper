import * as vscode from 'vscode';
import { analyzePython } from '../astParser';
import { assert } from 'console';
import { PythonFile } from '../../models/python/PythonFile';
import { generateImport } from '../module/importsExtractor';
import { PyImport } from '../../models/python/PyImport';
import { getConfig } from '../configLoader';
import { generateImports } from '../importsGenerator';
import { formatMultiLineArgs, INDENT_UNIT_AMOUNT } from '../multiLineArgsFormatter';
import { getWorkspaceFolder } from '../workspaceService';
import path from 'path';

export async function generateInjectorInitializer() {
    const config = getConfig();
    const workspaceFolder = getWorkspaceFolder();
    const imports = await analyzeModuleFiles(path.join(workspaceFolder.uri.fsPath, config.moduleDir));
    
    const importSource = generateImports(imports);
    const args = imports.map((imp) => imp.name + '()');
    const moduleArgs = formatMultiLineArgs(args, INDENT_UNIT_AMOUNT * 2);
    // Injector 初期化テンプレートに適用
    return `# generated by pyinjector-helper
from injector import Injector
${importSource}

injector = Injector(
    [${moduleArgs}]
)
`;
}

async function analyzeModuleFiles(dirPath: string): Promise<PyImport[]> {
    // モジュール出力ディレクトリ内を全て取得
    const files = await getFiles(dirPath);
    const imports: PyImport[] = [];
    for (const file of files) {
        // 取得したソースコードを解析
        const pyFile = await analyzePython(file.fsPath) as PythonFile;
        assert(pyFile);
        const pyClass = pyFile.class;
        // ファイルの import とクラス名を取得
        const pyImport = await generateImport(pyFile, pyClass);
        imports.push(pyImport);
    }
    return imports;
}

async function getFiles(dirPath: string): Promise<vscode.Uri[]> {
    // dirPathは絶対パスか、またはワークスペースルートからの相対パス
    const pattern = new vscode.RelativePattern(dirPath, '*.py');
    return await vscode.workspace.findFiles(pattern);
}
